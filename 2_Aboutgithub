# What is GitHub?
In this unit, we review the following learning objectives:

Brief overview of the GitHub Enterprise Platform
How to create a repository
Adding files to a repository
How to search for repositories
Introduction to gists and wikis

## GITHUB

GitHub is a cloud-based platform that uses Git, a distributed version control system, at its core. The GitHub platform simplifies the process of collaborating on projects and provides a website, command-line tools, and overall flow that allows developers and users to work together.

As we learned earlier, GitHub provides an AI powered developer platform to build, scale, and deliver secure software. Let’s break down each one of the core pillars of the GitHub Enterprise platform, AI, Collaboration, Productivity, Security, and Scale.

### AI
Generative AI is dramatically transforming software development as we speak. The GitHub Enterprise platform is enhancing collaboration through AI-powered pull requests and issues, productivity through Copilot, and security by automating security checks faster.

### Collaboration
Collaboration is at the core of everything GitHub does. We know inefficient collaboration results in wasted time and money. We counteract that with a suite of seamless tools that allow collaboration to happen effortlessly.

Repositories, Issues, Pull Requests, and other tools help to enable developers, project managers, operation leaders, and others at the same company. It enables them to work faster together, cut down approval times, and ship more quickly.

### Productivity
Productivity is accelerated with automation that the GitHub Enterprise Platform provides. With built-in CI/CD (Continuous Integration and Continuous Delivery) tools directly integrated into the workflow, the platform gives users the ability to set tasks and forget them, taking care of routine administration and speeding up day-to-day work. This gives your developers more time to focus on what matters most, creating innovative solutions.

### Security
GitHub focuses on integrating security directly into the development process from the start. GitHub Enterprise platform includes native, first-party security features that minimize security risk with a built-in security solution. Plus, your code remains private within your organization. At the same time, you're able to take advantage of security overview and Dependabot.

GitHub has continued to make investments to ensure that our features are enterprise-ready. Microsoft and highly regulated industries trust GitHub, and we meet global compliance requirements.

### Scale
GitHub is the largest developer community of its kind with real-time data on over 100M+ developers, 330M+ repositories, and countless deployments. We’ve been able to understand the shifting needs of developers and make changes to our product to match.

This has translated into an incredible scale that is unmatched and unparalleled by any other company on the planet. Everyday we're gaining more insights from this impressive community and evolving the platform to meet their needs.

In essence, the GitHub Enterprise Platform focuses on the developer experience. It has the scale to provide industry-changing insights, collaboration capabilities for transformative efficiency, the tools for increased productivity, security at every step, and AI to power it all to new heights in a single, integrated platform.

Now let’s get into the backbone of GitHub, repositories.

## Introduction to repositories
Let’s first review:

What is a repository?
How to create a repository
Adding files to a repository
How to search for repositories
Introduction to gists, wikis, and GitHub pages

### What is a repository?
A repository contains all of your project's files and each file's revision history. It's one of the essential parts that helps you collaborate with people. You can use repositories to manage your work, track changes, store revision history, and work with others. Before we dive too deep, let’s first start with how to create a repository.

### What are gists
Now that we have a good understanding of repositories, we can review gists. Similarly to repositories, gists are a simplified way to share code snippets with others.

Every gist is a Git repository, which you can fork and clone and be made either public or secret. Public gists are displayed publicly where people can browse new ones as they’re created. Public gists are also searchable. Conversely, secret gists aren't searchable, but they aren’t entirely private. If you send the URL of a secret gist to a friend, they'll be able to see it.

To learn more about gists, see the linked article in our Resources section at the end of this module titled Creating Gists.

### What are wikis?
Every repository on GitHub.com comes equipped with a section for hosting documentation, called a wiki. You can use your repository's wiki to share long-form content about your project, such as how to use it, how you designed it, or its core principles. While a README file quickly tells what your project can do, you can use a wiki to provide additional documentation.

## Components of the GitHub flow

In this unit, we're reviewing the following components of the GitHub flow:

Branches
Commits
Pull Requests
The GitHub Flow

### What are branches
In the last section, we created a new file and a new branch in your repositories.

Branches are an essential part to the GitHub experience because they're where we can make changes without affecting the entire project we're working on.

Your branch is a safe place to experiment with new features or fixes. If you make a mistake, you can revert your changes or push more changes to fix the mistake. Your changes won't update on the default branch until you merge your branch.

 **Note**
Alternatively, you can create a new branch and check it out by using git in a terminal. The command would be git checkout -b newBranchName

### What are commits
In the previous unit, you added a new file into the repository by pushing a commit. Let’s briefly review what commits are.

A commit is a change to one or more files on a branch. Every time a commit is created, it's assigned a unique ID and tracked along with the time and contributor. Commits provide a clear audit trail for anyone reviewing the history of a file or linked item, such as an issue or pull request.

Within a git repository, a file can exist in several valid states as it goes through the version control process. The primary states for a file in a Git repository are Untracked and Tracked.

1. Untracked: An initial state of a file when it isn't yet part of the Git repository. Git is unaware of its existence.

2. Tracked: A tracked file is one that Git is actively monitoring. It can be in one of the following substates:

**Unmodified**: The file is tracked, but it hasn't been modified since the last commit.
**Modified**: The file has been changed since the last commit, but these changes aren't yet staged for the next commit.
**Staged**: The file has been modified, and the changes have been added to the staging area (also known as the index). These changes are ready to be committed.
**Committed**: The file is in the repository's database. It represents the latest committed version of the file.
These states and substates are important to collaborating with your team to know where each and every commit is in the process of your project. Now let’s move on to pull requests.

### What are pull requests?
A pull request is the mechanism used to signal that the commits from one branch are ready to be merged into another branch.

The team member submitting the pull request asks one or more reviewers to verify the code and approve the merge. These reviewers have the opportunity to comment on changes, add their own, or use the pull request itself for further discussion.

Once the changes have been approved (if required), the pull request's source branch (the compare branch) is merged into the base branch.

### The GitHub flow
The GitHub flow can be defined as a lightweight workflow that allows for safe experimentation. You can test new ideas and collaboration with your team by using branching, pull requests, and merging.

Now that we know the basics of GitHub we can walk through the GitHub flow and its components.

Start by creating a branch so that the changes, features, and fixes you create don't affect the main branch.
Next, make your changes. We recommend deploying changes to your feature branch before merging into the main branch. Doing so ensures the changes are valid in a production environment.
Now, create a pull request to ask collaborators for feedback. Pull request review is so valuable that some repositories require an approving review before pull requests can be merged.
Then review and implement your feedback from your collaborators.
Once you feel great about your changes, it's time to get your pull request approved and merge it into the main branch.
Finally, you can delete your branch. Deleting your branch signals your work on the branch is complete and prevents you or others from accidentally using old branches.
That’s it, you’ve been through a GitHub flow cycle!

## GitHub is a collaborative platform
Collaboration is at the core of everything GitHub does. We went over repositories in the first unit of the module and learned that repositories help you organize your project and its files. In the last unit, we learned about pull requests, which is a way to keep track of changes made to your project.

### Issues
GitHub Issues were created to track ideas, feedback, tasks, or bugs for work on GitHub. Issues can be created in various ways, so you can choose the most convenient method for your workflow.

### Discussions
Discussions are for conversations that need to be accessible to everyone and aren't related to code. Discussions enable fluid, open conversation in a public forum.

## GitHub platform management
Now that you know the basics of the GitHub platform, let’s go over some platform management.

In this unit, we'll cover:

### Managing notifications and subscriptions.
You can choose to receive ongoing updates about specific activity on GitHub.com through a subscription. Notifications are the updates that you receive for specific activity to which you're subscribed.

### Subscribing to threads and finding threads where you're mentioned.
You can choose to subscribe to notifications for:

A conversation in a specific issue, pull request, or gist.

1.CI activity, such as the status of workflows in repositories set up with GitHub Actions.
2.Repository issues, pull requests, releases, security alerts, or discussions (if enabled).
3.All activity in a repository.
4.In some instances, you're automatically subscribed to conversations on GitHub. Examples include opening a pull request or issue, commenting on a thread, or being assigned to an issue or pull request.

If you're no longer interested in a conversation, you can unsubscribe, unwatch, or customize the types of notifications you'll receive in the future.

### Publicizing your project or organization on GitHub pages.
To round out our journey of GitHub, let’s tackle GitHub pages. You can use GitHub Pages to publicize and host a website about yourself, your organization, or your project directly from a repository on GitHub.com.

GitHub Pages is a static site-hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub. Optionally, you can run the files through a build process and publish a website. Edit and push your changes, and your project is live for the public in a visually organized way.

Next up, we'll walk through an exercise to get you started with GitHub. In the next exercise, you'll:

    Create a new repository.
    Create a new branch.
    Commit a file.
    Open a pull request.
    And merge a pull request.

## GitHub accounts and plans

In this unit, you learn about GitHub account types and plans.

### GitHub account types
It's important to understand that there's a difference between the types of GitHub accounts and the GitHub plans. Here are the three types of GitHub accounts:

    Personal
    Organization
    Enterprise

Let's review each of these account types in detail.

#### Personal accounts
Every person who uses GitHub.com signs into a personal account (sometimes referred to as a user account). Your personal/user account is your identity on GitHub.com and has a username and profile.

Your personal/user account can own resources such as repositories, packages, and projects and has a straightforward way to manage your permission. Actions that you take on GitHub.com, such as creating an issue or reviewing a pull request, are attributed to your personal account.

Each personal account uses either GitHub Free or GitHub Pro. All personal accounts can own an unlimited number of public and private repositories, with an unlimited number of collaborators on those repositories. If you use GitHub Free, private repositories owned by your personal account have a limited feature set.

#### Organization accounts
Organization accounts are shared accounts where an unlimited number of people can collaborate across many projects at once. Unlike personal/user accounts, permissions with organization accounts are done with a tiered approach.

Similar to personal accounts, organizations can own resources such as repositories, packages, and projects. However, you can't sign into an organization. Instead, each person signs into their own personal account, and any actions the person takes on organization resources are attributed to their personal account. Each personal account can be a member of multiple organizations.

The personal accounts within an organization can be given different roles in the organization to grant different levels of access to the organization and its data. All members can collaborate with each other in repositories and projects. But only organization owners and security managers can manage the settings for the organization and control access to the organization's data with sophisticated security and administrative features.

#### Enterprise accounts
Enterprise accounts on GitHub.com allow administrators to centrally manage policies and billing for multiple organizations and enable inner sourcing between their organizations. An enterprise account must have a handle, like an organization or user account on GitHub.

Organizations are shared accounts for enterprise members to collaborate across many projects at once. In the enterprise settings, enterprise owners can invite existing organizations to join your enterprise account, transfer organizations between enterprise accounts, or create new organizations.

Your enterprise account allows you to manage and enforce policies for all the organizations owned by the enterprise. Each enterprise policy controls the options available for a policy at the organization level.

## GitHub plans
Now that you have a better understanding of the different types of accounts you can have with GitHub, let's look at the different plans available to improve your software management process and team collaboration.

There are several free GitHub products, in addition to the paid ones:
    GitHub Free for personal accounts and organizations
    GitHub Pro for personal accounts
    GitHub Team
    GitHub Enterprise

#### GitHub Free
GitHub Free provides the basics for individuals and organizations. Anyone can sign up for the free version of GitHub.

#### GitHub Free for personal accounts
Signing up for GitHub Free gives a new user a personal user account. A personal user account includes unlimited public and private repositories and unlimited collaborators.

With GitHub Free, a personal account includes:

1.GitHub Community Support
2.Dependabot alerts
3.Two-factor authentication enforcement
4.500-MB GitHub Packages storage
5.120 GitHub Codespaces core hours per month
6.15-GB GitHub Codespaces storage per month
7.GitHub Actions:
    2,000 minutes per month
    Deployment protection rules for public repositories

#### GitHub Free for organizations
With GitHub Free for organizations, you can work with unlimited collaborators on unlimited public repositories, with a full feature set. Or, unlimited private repositories with a limited feature set.

In addition to the features available with GitHub Free for personal accounts, GitHub Free for organizations includes:
    Team access controls for managing groups

#### GitHub Pro
GitHub Pro is similar to GitHub Free but comes with upgraded features. The plan is designed for individual developers (using their personal account) who want advanced tools and insight within their repositories but don't belong to a team.

GitHub Pro accounts include all of the features of a GitHub Free account, plus the following advanced features:

1.GitHub Support via email
2.3,000 GitHub Actions minutes per month
3.2-GB GitHub Packages storage
4.180 GitHub Codespaces core hours per month
5.20-GB GitHub Codespaces storage per month
6.Advanced tools and insights in private repositories:
    Required pull request reviewers
    Multiple pull request reviewers
    Protected branches
    Code owners
    Autolinked references
    GitHub Pages
    Wikis
    Repository insight graphs for pulse, contributors, traffic, commits, code frequency, network, and forks

### GitHub Team
GitHub Team is the version of GitHub Pro for organizations. GitHub Team is better than GitHub Free for organizations because it provides increased GitHub Actions minutes and extra GitHub Packages storage.

Let's go over the extra features in GitHub Team that help with team collaboration:

1.GitHub Support via email
2.3,000 GitHub Actions minutes per month
3.2-GB GitHub Packages storage
4.Advanced tools and insights in private repositories:
    Required pull request reviewers
    Multiple pull request reviewers
    Draft pull requests
    Team pull request reviewers
    Protected branches
    Code owners
    Scheduled reminders
    GitHub Pages
    Wikis

Repository insight graphs for pulse, contributors, traffic, commits, code frequency, network, and forks
The option to enable or disable GitHub Codespaces

### GitHub Enterprise
GitHub Enterprise accounts enjoy a greater level of support and extra security, compliance, and deployment controls.

You can create one or more enterprise accounts by signing up for the paid GitHub Enterprise product. When you create an enterprise account, you're assigned the role of enterprise owner. As an enterprise owner, you can add and remove organizations to and from the enterprise account. You can manage other administrators, enforce security policies across organizations, and so on.

In addition to the features available with GitHub Team, GitHub Enterprise includes:

GitHub Enterprise Support
More security, compliance, and deployment controls
Authentication with security assertion markup language (SAML) single sign-on
Access provisioning with SAML or System for Cross-domain Identity Management (SCIM)
Deployment protection rules with GitHub Actions for private or internal repositories GitHub Connect
The option to purchase GitHub Advanced Security

#### GitHub Enterprise options
There are two different GitHub Enterprise options:

    GitHub Enterprise Server
    GitHub Enterprise Cloud

The significant difference between GitHub Enterprise Server (GHES) and GitHub Enterprise Cloud is that GHES is a self-hosted solution that allows organizations to have full control over their infrastructure.

The other difference between GHES and GitHub Enterprise Cloud is that GitHub Enterprise Cloud includes a dramatic increase in both GitHub Actions minutes and GitHub Packages storage.

Here are the extra features of GitHub Enterprise Cloud:

1.50,000 GitHub Actions minutes per month
2.50-GB GitHub Packages storage
3.A service level agreement for 99.9% monthly uptime
4.Option to centrally manage policy and billing for multiple GitHub.com organizations with an enterprise account
5.Option to provision and manage the user accounts for your developers, by using Enterprise Managed Users

## GitHub Mobile and GitHub Desktop

There are multiple ways to access your GitHub account aside from github.com. GitHub Mobile and GitHub Desktop allow you to have a seamless experience while accessing your account on the go.

Let's briefly review GitHub Desktop and GitHub Mobile and their features.

### GitHub Mobile
GitHub Mobile gives you a way to do high-impact work on GitHub quickly and from anywhere. GitHub Mobile is a safe and secure way to access your GitHub data through a trusted, first-party client application.

With GitHub Mobile you can:

    Manage, triage, and clear notifications from github.com.
    Read, review, and collaborate on issues and pull requests.  
    Edit files in pull requests.
    Search for, browse, and interact with users, repositories, and organizations.
    Receive a push notification when someone mentions your username.
    Schedule your push notifications for specific custom hours.
    Secure your GitHub.com account with two-factor authentication.
    Verify your sign in attempts on unrecognized devices.

### GitHub Desktop
GitHub Desktop is an open-source, stand-alone software application that enables you to be more productive. It facilitates collaboration between you and your team and the sharing of Git and GitHub best practices within your team.

Here are a few of the many things you can do with GitHub Desktop:

    Add and clone repositories.
    Add changes to your commit interactively.
    Quickly add coauthors to your commit.
    Check out branches with pull requests and view CI statuses.
    Compare changed images.

### GitHub billing

Now let's review billing and payments for your GitHub account.

GitHub bills separately for each account. You receive a separate bill for your personal account and for each organization or enterprise account you own.

The bill for each account is a combination of charges for your subscriptions and usage-based billing.

Subscriptions include your account's plan, such as GitHub Pro or GitHub Team, and paid products that have a consistent monthly cost, such as GitHub Copilot and apps from GitHub Marketplace.
Usage-based billing applies when the cost of a paid product depends on how much you use the product. For example, the cost of GitHub Actions depends on how many minutes your jobs spend running and how much storage your artifacts use.

